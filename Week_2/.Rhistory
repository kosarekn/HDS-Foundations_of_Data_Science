p1 <- ggplot(gene_metadata, aes(x = timepoint, y = CXCL13, fill = timepoint)) +geom_boxplot() +
labs(x = "Time Point", y = "CXCL13 Count", fill = "Time Point",
title = "CXCL13 Count Distribution \nby Treatment Time Point") +
theme_minimal() +
scale_fill_brewer(palette = "Set1") + stat_compare_means(method = "wilcox", size = 3) + theme(
text = element_text(size = 8),           # Set base text size
axis.title = element_text(size = 8),     # Axis titles
axis.text = element_text(size = 8),      # Axis text
legend.title = element_text(size = 8),   # Legend title
legend.text = element_text(size = 8),    # Legend text
plot.title = element_text(size = 8, hjust = 0.5)  # Title (centered)
)
## This is our ACTA2 plot
p2 <- ggplot(gene_metadata, aes(x = timepoint, y = ACTA2, fill = timepoint)) +geom_boxplot() +
labs(x = "Time Point", y = "ACTA2 Count", fill = "Time Point",
title = "ACTA2 Count Distribution \nby Treatment Time Point") +
theme_minimal() +
scale_fill_brewer(palette = "Set1") + stat_compare_means(method = "wilcox", size = 3) + theme(
text = element_text(size = 8),           # Set base text size
axis.title = element_text(size = 8),     # Axis titles
axis.text = element_text(size = 8),      # Axis text
legend.title = element_text(size = 8),   # Legend title
legend.text = element_text(size = 8),    # Legend text
plot.title = element_text(size = 8, hjust = 0.5)  # Title (centered)
)
## This is our STAT3 plot
p3 <- ggplot(gene_metadata, aes(x = timepoint, y = STAT3, fill = timepoint)) +geom_boxplot() +
labs(x = "Time Point", y = "STAT3 Count", fill = "Time Point",
title = "STAT3 Count Distribution \nby Treatment Time Point") +
theme_minimal() +
scale_fill_brewer(palette = "Set1") + stat_compare_means(method = "wilcox", size = 3) + theme(
text = element_text(size = 8),           # Set base text size
axis.title = element_text(size = 8),     # Axis titles
axis.text = element_text(size = 8),      # Axis text
legend.title = element_text(size = 8),   # Legend title
legend.text = element_text(size = 8),    # Legend text
plot.title = element_text(size = 8, hjust = 0.5)  # Title (centered)
)
grid.arrange(p1, p2, p3, ncol = 2, nrow = 2)  # Arrange in 2 columns
png("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_2/Figures/boxplot_panel.png", width = 2000, height = 1500, res = 300)
print(grid.arrange(p1, p2, p3, ncol = 2, nrow = 2))
dev.off()
## Generates full summary statistics
summary(metadata$AGE)
## Minimum
min(metadata$AGE)
## Maximum
max(metadata$AGE)
## Mean
mean(metadata$AGE)
## Median
median(metadata$AGE)
## Standard Deviation
sd(metadata$AGE)
install.packages("haven")
library(haven)
blood_pressure_df <- read_xpt("/Users/f002yt8/Desktop/BPXO_L.xpt")
demographics_df <- read_xpt("/Users/f002yt8/Desktop/DEMO_L.xpt")
head(blood_pressure_df)
head(demographics_df)
library(haven)
blood_pressure_df <- read_xpt("/Users/f002yt8/Desktop/BPXO_L.xpt")
demographics_df <- read_xpt("/Users/f002yt8/Desktop/DEMO_L.xpt")
head(blood_pressure_df)
head(demographics_df)
## Combine data frames on the SEQN column
data_df <- merge(demographics_df, blood_pressure_df, by = "SEQN")
dim(data_df)
mean(data_df$BPXOPLS1)
is.na(data_df$BPXOPLS1)
length(which(is.na(data_df$BPXOPLS1)==TRUE))
mean(data_df$BPXOPLS1,na.rm = TRUE)
max(data_df$BPXOPLS1,na.rm = TRUE)
min(data_df$BPXOPLS1,na.rm = TRUE)
## Load the haven library to read in .xpt files
library(haven)
## Read in files
blood_pressure_df <- read_xpt("/Users/f002yt8/Desktop/BPXO_L.xpt")
## Load the haven library to read in .xpt files
library(haven)
## Read in files
blood_pressure_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/BPXO_L.xpt")
demographics_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/DEMO_L.xpt")
## Take a look at the data
head(blood_pressure_df)
head(demographics_df)
## Combine data frames on the SEQN (participant identifier) column
data_df <- merge(demographics_df, blood_pressure_df, by = "SEQN")
## RIDAGEYR - Age in years at exam
## BPXOPLS1 - Pulse reading 1
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Histogram for RIDAGEYR
p1 <- ggplot(data_df, aes(x = RIDAGEYR)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram of RIDAGEYR",
x = "RIDAGEYR",
y = "Frequency")
# Violin plot for RIDAGEYR
p2 <- ggplot(data_df, aes(x = "", y = RIDAGEYR)) +
geom_violin(fill = "blue", alpha = 0.7) +
labs(title = "Violin Plot of RIDAGEYR",
x = "",
y = "RIDAGEYR")
# Cumulative Distribution Function for RIDAGEYR
p3 <- ggplot(data_df, aes(x = RIDAGEYR)) +
stat_ecdf(geom = "step", color = "blue") +
labs(title = "CDF of RIDAGEYR",
x = "RIDAGEYR",
y = "Cumulative Probability")
# Arrange RIDAGEYR plots
ridageyr_plots <- ggarrange(p1, p2, p3,
ncol = 3,
nrow = 1)
# Histogram for BPXOPLS1
p4 <- ggplot(data_df, aes(x = BPXOPLS1)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
labs(title = "Histogram of BPXOPLS1",
x = "BPXOPLS1",
y = "Frequency")
# Violin plot for BPXOPLS1
p5 <- ggplot(data_df, aes(x = "", y = BPXOPLS1)) +
geom_violin(fill = "red", alpha = 0.7) +
labs(title = "Violin Plot of BPXOPLS1",
x = "",
y = "BPXOPLS1")
# Cumulative Distribution Function for BPXOPLS1
p6 <- ggplot(data_df, aes(x = BPXOPLS1)) +
stat_ecdf(geom = "step", color = "red") +
labs(title = "CDF of BPXOPLS1",
x = "BPXOPLS1",
y = "Cumulative Probability")
# Arrange BPXOPLS1 plots
bpxopls1_plots <- ggarrange(p4, p5, p6,
ncol = 3,
nrow = 1)
# Display plots
print(ridageyr_plots)
print(bpxopls1_plots)
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Histogram for RIDAGEYR
p1 <- ggplot(data_df, aes(x = RIDAGEYR)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram of RIDAGEYR",
x = "RIDAGEYR",
y = "Frequency")
# Violin plot for RIDAGEYR
p2 <- ggplot(data_df, aes(x = "", y = RIDAGEYR)) +
geom_violin(fill = "blue", alpha = 0.7) +
labs(title = "Violin Plot of RIDAGEYR",
x = "",
y = "RIDAGEYR")
# Cumulative Distribution Function for RIDAGEYR
p3 <- ggplot(data_df, aes(x = RIDAGEYR)) +
stat_ecdf(geom = "step", color = "blue") +
labs(title = "CDF of RIDAGEYR",
x = "RIDAGEYR",
y = "Cumulative Probability")
# Arrange RIDAGEYR plots
ridageyr_plots <- ggarrange(p1, p2, p3,
ncol = 2,
nrow = 2)
# Histogram for BPXOPLS1
p4 <- ggplot(data_df, aes(x = BPXOPLS1)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
labs(title = "Histogram of BPXOPLS1",
x = "BPXOPLS1",
y = "Frequency")
# Violin plot for BPXOPLS1
p5 <- ggplot(data_df, aes(x = "", y = BPXOPLS1)) +
geom_violin(fill = "red", alpha = 0.7) +
labs(title = "Violin Plot of BPXOPLS1",
x = "",
y = "BPXOPLS1")
# Cumulative Distribution Function for BPXOPLS1
p6 <- ggplot(data_df, aes(x = BPXOPLS1)) +
stat_ecdf(geom = "step", color = "red") +
labs(title = "CDF of BPXOPLS1",
x = "BPXOPLS1",
y = "Cumulative Probability")
# Arrange BPXOPLS1 plots
bpxopls1_plots <- ggarrange(p4, p5, p6,
ncol = 2,
nrow = 2)
# Display plots
print(ridageyr_plots)
print(bpxopls1_plots)
print(ridageyr_plots)
print(bpxopls1_plots)
summary(data_df$RIDAGEYR)
## Check for NAs in the age variable
length(which(is.nsa(data_df$RIDAGEYR) == TRUE))
## Check for NAs in the age variable
length(which(is.na(data_df$RIDAGEYR) == TRUE))
## Subset the data
data_df_sub <- data_df[data_df$RIDAGEYR >= 18,]
## Number of participants aft er subsetting to adults
dim(data_df_sub)
## Check for NAs in the age variable
length(which(is.na(data_df$BPXOPLS1) == TRUE))
dim(data_df)
data_df_sub <- data_df[(data_df$RIDAGEYR >= 18) | (is.na(data_df$BPXOPLS1) == FALSE),]
## Number of participants after subsetting to adults
dim(data_df_sub)
data_df_sub <- data_df[(data_df$RIDAGEYR >= 18) &| (is.na(data_df$BPXOPLS1) == FALSE),]
## Load the haven library to read in .xpt files
library(haven)
## Read in files
blood_pressure_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/BPXO_L.xpt")
demographics_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/DEMO_L.xpt")
## Take a look at the data
head(blood_pressure_df)
head(demographics_df)
## Combine data frames on the SEQN (participant identifier) column
data_df <- merge(demographics_df, blood_pressure_df, by = "SEQN")
## RIDAGEYR - Age in years at exam
## BPXOPLS1 - Pulse reading 1
## Read in libraries
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Histogram for Age
p1 <- ggplot(data_df, aes(x = RIDAGEYR)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Age",
x = "Age",
y = "Frequency")
# Violin plot for Age
p2 <- ggplot(data_df, aes(x = "", y = RIDAGEYR)) +
geom_violin(fill = "blue", alpha = 0.7) +
labs(title = "Violin Plot of Age",
x = "",
y = "Age")
# Cumulative Distribution Function for Age
p3 <- ggplot(data_df, aes(x = RIDAGEYR)) +
stat_ecdf(geom = "step", color = "blue") +
labs(title = "CDF of Age",
x = "Age",
y = "Cumulative Probability")
# Arrange Age plots
ridageyr_plots <- ggarrange(p1, p2, p3,
ncol = 2,
nrow = 2)
# Histogram for Heart Rate
p4 <- ggplot(data_df, aes(x = BPXOPLS1)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
labs(title = "Histogram of Heart Rate",
x = "Heart Rate",
y = "Frequency")
# Violin plot for Heart Rate
p5 <- ggplot(data_df, aes(x = "", y = BPXOPLS1)) +
geom_violin(fill = "red", alpha = 0.7) +
labs(title = "Violin Plot of Heart Rate",
x = "",
y = "Heart Rate")
# Cumulative Distribution Function for Heart Rate
p6 <- ggplot(data_df, aes(x = BPXOPLS1)) +
stat_ecdf(geom = "step", color = "red") +
labs(title = "CDF of Heart Rate",
x = "Heart Rate",
y = "Cumulative Probability")
# Arrange Heart Rate plots
bpxopls1_plots <- ggarrange(p4, p5, p6,
ncol = 2,
nrow = 2)
# Display plots
print(ridageyr_plots)
print(bpxopls1_plots)
## Check for NAs in the age variable
length(which(is.na(data_df$RIDAGEYR) == TRUE))
## Check for NAs in the age variable
length(which(is.na(data_df$BPXOPLS1) == TRUE))
## Subset the data to remove under 18
data_df_sub <- data_df[data_df$RIDAGEYR >= 18,]
data_df_sub <- data_df[(is.na(data_df$BPXOPLS1) == FALSE),]
## Number of participants after subsetting to adults
dim(data_df_sub)
## Load the haven library to read in .xpt files
library(haven)
## Read in files
blood_pressure_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/BPXO_L.xpt")
demographics_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/DEMO_L.xpt")
## Take a look at the data
head(blood_pressure_df)
head(demographics_df)
## Combine data frames on the SEQN (participant identifier) column
data_df <- merge(demographics_df, blood_pressure_df, by = "SEQN")
## RIDAGEYR - Age in years at exam
## BPXOPLS1 - Pulse reading 1
## Read in libraries
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Histogram for Age
p1 <- ggplot(data_df, aes(x = RIDAGEYR)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Age",
x = "Age",
y = "Frequency")
# Violin plot for Age
p2 <- ggplot(data_df, aes(x = "", y = RIDAGEYR)) +
geom_violin(fill = "blue", alpha = 0.7) +
labs(title = "Violin Plot of Age",
x = "",
y = "Age")
# Cumulative Distribution Function for Age
p3 <- ggplot(data_df, aes(x = RIDAGEYR)) +
stat_ecdf(geom = "step", color = "blue") +
labs(title = "CDF of Age",
x = "Age",
y = "Cumulative Probability")
# Arrange Age plots
ridageyr_plots <- ggarrange(p1, p2, p3,
ncol = 2,
nrow = 2)
# Histogram for Heart Rate
p4 <- ggplot(data_df, aes(x = BPXOPLS1)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
labs(title = "Histogram of Heart Rate",
x = "Heart Rate",
y = "Frequency")
# Violin plot for Heart Rate
p5 <- ggplot(data_df, aes(x = "", y = BPXOPLS1)) +
geom_violin(fill = "red", alpha = 0.7) +
labs(title = "Violin Plot of Heart Rate",
x = "",
y = "Heart Rate")
# Cumulative Distribution Function for Heart Rate
p6 <- ggplot(data_df, aes(x = BPXOPLS1)) +
stat_ecdf(geom = "step", color = "red") +
labs(title = "CDF of Heart Rate",
x = "Heart Rate",
y = "Cumulative Probability")
# Arrange Heart Rate plots
bpxopls1_plots <- ggarrange(p4, p5, p6,
ncol = 2,
nrow = 2)
# Display plots
print(ridageyr_plots)
print(bpxopls1_plots)
## Check for NAs in the age variable
length(which(is.na(data_df$RIDAGEYR) == TRUE))
## Check for NAs in the age variable
length(which(is.na(data_df$BPXOPLS1) == TRUE))
## Subset the data to remove under 18
data_df_sub <- data_df[data_df$RIDAGEYR >= 18,]
dim(data_df_sub)
data_df_sub <- data_df_sub[(is.na(data_df_sub$BPXOPLS1) == FALSE),]
dim(data_df_sub)
## Number of participants after subsetting to adults
# Basic scatter plot of heart rate vs age
ggplot(data_df_sub, aes(x = RIDAGEYR, y = BPXOPLS1)) +
geom_point(alpha = 0.6, color = "blue") +             # scatter points with some transparency
labs(
title = "Scatter plot of Heart Rate vs Age",
x = "Age",
y = "Heart Rate"
) +
theme_minimal()
ggplot(data_df_sub, aes(x = RIDAGEYR, y = BPXOPLS1)) +
geom_point(alpha = 0.6, color = "blue") +          # scatter plot points
geom_smooth(method = "lm", se = TRUE, color = "red") +  # add linear regression line with confidence interval
labs(
title = "Heart Rate vs Age with Linear Regression Line",
x = "Age (RIDAGEYR)",
y = "Heart Rate (BPXOPLS1)"
) +
theme_minimal()
library(ggplot2)
# Fit linear model
model <- lm(BPXOPLS1 ~ RIDAGEYR, data = data_df_sub)
# Extract coefficients
coefficients <- coef(model)
intercept <- coefficients[1]
slope <- coefficients[2]
# Create equation label text
eq_label <- paste0("y = ",
round(slope, 2), "x + ",
round(intercept, 2))
# Generate scatter plot with regression line and equation annotation
ggplot(data_df_sub, aes(x = RIDAGEYR, y = BPXOPLS1)) +
geom_point(alpha = 0.6, color = "blue") +                     # scatter points
geom_smooth(method = "lm", se = TRUE, color = "red") +        # regression line with CI
labs(
title = "Heart Rate vs Age with Regression Line and Equation",
x = "Age (RIDAGEYR)",
y = "Heart Rate (BPXOPLS1)"
) +
annotate("text", x = Inf, y = -Inf, label = eq_label,
hjust = 1.1, vjust = -1.1, size = 5, color = "red") +   # add equation at bottom-right corner
theme_minimal()
# Install ggpubr if you haven't already
# install.packages("ggpubr")
library(ggplot2)
library(ggpubr)
ggscatter(data_df_sub, x = "RIDAGEYR", y = "BPXOPLS1",
add = "reg.line",                      # Add regression line
conf.int = TRUE,                       # Add confidence interval
cor.coef = TRUE,                       # Add correlation coefficient
cor.method = "pearson",
xlab = "Age (RIDAGEYR)",
ylab = "Heart Rate (BPXOPLS1)",
title = "Correlation between Age and Heart Rate")
## Load the haven library to read in .xpt files
library(haven)
## Read in files
blood_pressure_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/BPXO_L.xpt")
demographics_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/DEMO_L.xpt")
## Take a look at the data
head(blood_pressure_df)
head(demographics_df)
## Combine data frames on the SEQN (participant identifier) column
data_df <- merge(demographics_df, blood_pressure_df, by = "SEQN")
## RIDAGEYR - Age in years at exam
## BPXOSY1 - Systolic reading
## Read in libraries
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Histogram for Age
p1 <- ggplot(data_df, aes(x = RIDAGEYR)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Age",
x = "Age",
y = "Frequency")
# Violin plot for Age
p2 <- ggplot(data_df, aes(x = "", y = RIDAGEYR)) +
geom_violin(fill = "blue", alpha = 0.7) +
labs(title = "Violin Plot of Age",
x = "",
y = "Age")
# Cumulative Distribution Function for Age
p3 <- ggplot(data_df, aes(x = RIDAGEYR)) +
stat_ecdf(geom = "step", color = "blue") +
labs(title = "CDF of Age",
x = "Age",
y = "Cumulative Probability")
# Arrange Age plots
ridageyr_plots <- ggarrange(p1, p2, p3,
ncol = 2,
nrow = 2)
# Histogram for Heart Rate
p4 <- ggplot(data_df, aes(x = BPXOSY1)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
labs(title = "Histogram of Heart Rate",
x = "Heart Rate",
y = "Frequency")
# Violin plot for Heart Rate
p5 <- ggplot(data_df, aes(x = "", y = BPXOSY1)) +
geom_violin(fill = "red", alpha = 0.7) +
labs(title = "Violin Plot of Heart Rate",
x = "",
y = "Heart Rate")
# Cumulative Distribution Function for Heart Rate
p6 <- ggplot(data_df, aes(x = BPXOSY1)) +
stat_ecdf(geom = "step", color = "red") +
labs(title = "CDF of Heart Rate",
x = "Heart Rate",
y = "Cumulative Probability")
# Arrange Heart Rate plots
BPXOSY1_plots <- ggarrange(p4, p5, p6,
ncol = 2,
nrow = 2)
# Display plots
print(ridageyr_plots)
print(BPXOSY1_plots)
## Check for NAs in the age variable
length(which(is.na(data_df$RIDAGEYR) == TRUE))
## Check for NAs in the age variable
length(which(is.na(data_df$BPXOSY1) == TRUE))
## Subset the data to remove under 18
data_df_sub <- data_df[data_df$RIDAGEYR >= 18,]
## Subset the data to remove participants with NA values
data_df_sub <- data_df_sub[(is.na(data_df_sub$BPXOSY1) == FALSE),]
## Number of participants after subsetting to adults
dim(data_df_sub)
# Basic scatter plot of heart rate vs age
ggplot(data_df_sub, aes(x = RIDAGEYR, y = BPXOSY1)) +
geom_point(alpha = 0.6, color = "blue") +             # scatter points with some transparency
labs(
title = "Scatter plot of Heart Rate vs Age",
x = "Age",
y = "Heart Rate"
) +
theme_minimal()
# Fit linear model
model <- lm(BPXOSY1 ~ RIDAGEYR, data = data_df_sub)
# Extract coefficients
coefficients <- coef(model)
intercept <- coefficients[1]
slope <- coefficients[2]
# Create equation label text
eq_label <- paste0("y = ",
round(slope, 2), "x + ",
round(intercept, 2))
# Generate scatter plot with regression line and equation annotation
ggplot(data_df_sub, aes(x = RIDAGEYR, y = BPXOSY1)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(
title = "Heart Rate vs Age with Regression Line and Equation",
x = "Age",
y = "Heart Rate"
) +
annotate("text", x = Inf, y = -Inf, label = eq_label,
hjust = 1.1, vjust = -1.1, size = 5, color = "red") +
theme_minimal()
## Check for NAs in the age variable
length(which(is.na(data_df$BPXOSY1) == TRUE))
