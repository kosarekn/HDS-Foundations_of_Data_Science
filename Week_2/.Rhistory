# Load necessary libraries
library(dplyr)
# Set the seed for reproducibility
set.seed(123)
# Define the number of samples
n <- 100  # You can change this number to generate more or fewer samples
# Generate random data
random_data <- data.frame(
Subject_ID = paste("Subject", 1:n, sep = "_"),  # Generate Subject IDs
Age = pmax(18, pmin(85, round(rnorm(n, mean = 50, sd = 10)))),  # Random ages between 18 and 85
Sex = sample(c("Male", "Female"), n, replace = TRUE),  # Random sex values
Disease_Status = sample(c("Case", "Control"), n, replace = TRUE),  # Random disease status
Heart_Rate = pmax(40, pmin(200, round(rnorm(n, mean = 75, sd = 15))))  # Random heart rates between 40 and 200
)
# View the first few rows of the generated dataset
head(random_data)
hist(random_data$Heart_Rate)
hist(random_data$Heart_Rate, main = "Distribution of Heart Rate",
xlab = "Heart Rate",
ylab = "Freq")
# Load necessary libraries
library(dplyr)
# Set the seed for reproducibility
set.seed(123)
# Define the number of samples
n <- 100  # You can change this number to generate more or fewer samples
# Generate random data
random_data <- data.frame(
Subject_ID = paste("Subject", 1:n, sep = "_"),  # Generate Subject IDs
Age = pmax(18, pmin(85, round(rnorm(n, mean = 50, sd = 10)))),  # Random ages between 18 and 85
Sex = sample(c("Male", "Female"), n, replace = TRUE),  # Random sex values
Disease_Status = sample(c("Case", "Control"), n, replace = TRUE),  # Random disease status
Heart_Rate = pmax(40, pmin(200, round(rnorm(n, mean = 75, sd = 15))))  # Random heart rates between 40 and 200
)
# View the first few rows of the generated dataset
head(random_data)
hist(random_data$Heart_Rate)
hist(random_data$Heart_Rate, main = "Distribution of Heart Rate",
xlab = "Heart Rate",
ylab = "Freq")
hist(random_data$Heart_Rate, main = "Distribution of Heart Rate",
xlab = "Heart Rate",
ylab = "Freq",
breaks = 10)
hist(random_data$Heart_Rate, main = "Distribution of Heart Rate",
xlab = "Heart Rate",
ylab = "Freq",
breaks = 100)
hist(random_data$Heart_Rate, main = "Distribution of Heart Rate",
xlab = "Heart Rate",
ylab = "Freq",
breaks = 1000)
hist(random_data$Heart_Rate, main = "Distribution of Heart Rate",
xlab = "Heart Rate",
ylab = "Freq",
breaks = 20)
hist(random_data$Heart_Rate, main = "Distribution of Heart Rate",
xlab = "Heart Rate",
ylab = "Freq",
breaks = 30)
plot(random_data$Age, random_data$Heart_Rate, main = "Age vs. Heart Rate", xlab = "Age", ylab = "Heart Rate")
raw_dat <- read.delim("/Users/f002yt8/Desktop/GSE98816_Brain_samples_raw_read_counts_matrix.txt")
head(raw_dat)
tail(raw_dat)
tail(raw_dat[1])
tail(raw_dat[2])
dim(raw_dat)
head(raw_dat[1:5,1:5])
raw_dat <- read.delim("/Users/f002yt8/Desktop/GSE98816_Brain_samples_raw_read_counts_matrix.txt",
row.names = 1)
head(raw_dat[1:5,1:5])
meta_dat <- read.delim("/Users/f002yt8/Desktop/GSE98816_series_matrix.txt",
row.names = 1)
meta_dat <- read.delim("/Users/f002yt8/Desktop/GSE98816_series_matrix.txt")
head(meta_dat[1:5,1:5])
meta_dat <- read.delim("/Users/f002yt8/Desktop/GSE98816_series_matrix.txt")
head(meta_dat)
colnames(meta_dat)
dim(meta_dat)
# Read the raw file
file_path <- "/Users/f002yt8/Desktop/GSE98816_series_matrix.txt"
raw_lines <- readLines(file_path)
# Extract column names (removing "!" from each column name)
column_names <- gsub("^!", "", unlist(strsplit(raw_lines[1], "\t")))
# Read data, skipping the first line
data <- read.table(file_path, sep = "\t", header = FALSE, skip = 1, stringsAsFactors = FALSE)
# Read the raw file
file_path <- "/Users/f002yt8/Desktop/GSE98816_series_matrix.txt"
# Read the raw file
raw_lines <- readLines(file_path)
# Extract column names (removing "!" from each column name)
column_names <- gsub("^!", "", unlist(strsplit(raw_lines[1], "\t")))
# Read the remaining data as a list to check column lengths
data_lines <- strsplit(raw_lines[-1], "\t")  # Split each row into elements
# Transpose the list into a column-wise structure
data_list <- lapply(seq_along(column_names), function(i) sapply(data_lines, `[`, i))
# Keep only columns with exactly 3187 elements
valid_indices <- sapply(data_list, function(col) length(col) == 3187)
filtered_column_names <- column_names[valid_indices]
filtered_data_list <- data_list[valid_indices]
# Convert to a data frame
filtered_data <- as.data.frame(filtered_data_list, stringsAsFactors = FALSE)
# Assign valid column names
colnames(filtered_data) <- filtered_column_names
# View the filtered data
head(filtered_data)
head(raw_lines)
head(column_names)
# Load necessary libraries
library(dplyr)
# Set the seed for reproducibility
set.seed(123)
# Define the number of samples
n <- 100  # You can change this number to generate more or fewer samples
# Generate random data
random_data <- data.frame(
Subject_ID = paste("Subject", 1:n, sep = "_"),  # Generate Subject IDs
Age = pmax(18, pmin(85, round(rnorm(n, mean = 50, sd = 10)))),  # Random ages between 18 and 85
Sex = sample(c("Male", "Female"), n, replace = TRUE),  # Random sex values
Disease_Status = sample(c("Case", "Control"), n, replace = TRUE),  # Random disease status
Heart_Rate = pmax(40, pmin(200, round(rnorm(n, mean = 75, sd = 15))))  # Random heart rates between 40 and 200
)
# View the first few rows of the generated dataset
head(random_data)
library(ggplot2)
ggplot(random_data, aes(x = Sex, y = Heart_Rate, fill = Disease_Status)) +
geom_boxplot() +
labs(x = "Sex", y = "Heart Rate", fill = "Disease Status",
title = "Heart Rate Distribution \nby Sex and Disease Status") +
theme_minimal() +
scale_fill_brewer(palette = "Set1")  # Adjust colors if needed
library(ggdist)
ggplot(random_data, aes(x = Sex, y = Heart_Rate, fill = Disease_Status)) +
geom_half_violin(position = position_dodge(width = 0.75), alpha = 0.6) +
geom_boxplot(width = 0.2, position = position_dodge(width = 0.75), outlier.shape = NA, alpha = 0.7) +
geom_jitter(aes(color = Disease_Status), position = position_dodge(width = 0.75), size = 1.5, alpha = 0.6) +
theme_minimal() +
labs(title = "Raincloud Plot: Heart Rate by Sex & Disease Status") +
scale_fill_brewer(palette = "Set1") +
scale_color_brewer(palette = "Set1")
library(ggdist)
ggplot(random_data, aes(x = Sex, y = Heart_Rate, fill = Disease_Status)) +
stat_halfeye(aes(color = Disease_Status), position = position_dodge(width = 0.75), alpha = 0.6) +  # Half violin from ggdist
geom_boxplot(width = 0.2, position = position_dodge(width = 0.75), outlier.shape = NA, alpha = 0.7) +
geom_jitter(aes(color = Disease_Status), position = position_dodge(width = 0.75), size = 1.5, alpha = 0.6) +
theme_minimal() +
labs(title = "Raincloud Plot: Heart Rate by Sex & Disease Status") +
scale_fill_brewer(palette = "Set1") +
scale_color_brewer(palette = "Set1")
library(ggbeeswarm)
ggplot(random_data, aes(x = Sex, y = Heart_Rate, color = Disease_Status)) +
geom_quasirandom(dodge.width = 0.75, size = 2, alpha = 0.7) +
theme_minimal() +
labs(title = "Beeswarm Plot: Heart Rate by Sex & Disease Status") +
scale_color_brewer(palette = "Set1")
## Change this file path to the path for the data on your local machine
file_path <- "/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_2/data/"
## Use read.delim to read in this data
ra_data <- read.delim(paste0(file_path, "GSE198520_Raw_gene_count_matrix.txt"), row.names = 1)
ra_df <- data.frame(ra_data)
## Visualize the data frame
print(head(ra_df))
## Read in the file using read.csv()
metadata <- read.csv(paste0(file_path,"metadata.csv"), row.names = 1)
## I just like to make sure everything is a data frame when I read it in
metadata <- data.frame(metadata)
## Visualize the contents of the file
head(metadata)
summary(metadata$AGE)
summary(metadata$AGE)
min(metadata$AGE)
max(metadata$AGE)
mean(metadata$AGE)
median(metadata$AGE)
sd(metadata$AGE)
# Load necessary libraries
library(dplyr)
# Set the seed for reproducibility
set.seed(123)
# Define the number of samples
n <- 100  # You can change this number to generate more or fewer samples
# Generate random data
random_data <- data.frame(
Subject_ID = paste("Subject", 1:n, sep = "_"),  # Generate Subject IDs
Age = pmax(18, pmin(85, round(rnorm(n, mean = 50, sd = 10)))),  # Random ages between 18 and 85
Sex = sample(c("Male", "Female"), n, replace = TRUE),  # Random sex values
Disease_Status = sample(c("Case", "Control"), n, replace = TRUE),  # Random disease status
Heart_Rate = pmax(40, pmin(200, round(rnorm(n, mean = 75, sd = 15))))  # Random heart rates between 40 and 200
)
# View the first few rows of the generated dataset
head(random_data)
## Exchange the word "Subject" for "Participant" in our "Subject_ID" column
random_data$Subject_ID <- gsub("Subject", "Participant", random_data$Subject_ID)
## Visualize the data frame
head(random_data)
sentence <- "Hello_Everyone_And_Welcome_To_Foundations_of_Data_Science!"
sentence <- sub("^([^_]*)_([^_]*)_([^_]*)_", "\\1_\\2_\\3 ", sentence)
print(sentence)
sentence <- "Hello_Everyone_And_Welcome_To_Foundations_of_Data_Science!"
sentence <- sub("^([^_]*)_([^_]*)_([^_]*)_", "\\1_\\2_\\3 ", sentence)
print(sentence[1])
sentence <- "Hello_Everyone_And_Welcome_To_Foundations_of_Data_Science!"
result <- sub("^(([^_]*_){2}[^_]*)_.*", "\\1", sentence)
print(result)
my_string <- "Hello_Everyone_And_Welcome_To_Foundations_of_Data_Science!"
my_string_sub <- sub("^(([^_]*_){2}[^_]*)_.*", "\\1", my_string)
print(my_string_sub)
