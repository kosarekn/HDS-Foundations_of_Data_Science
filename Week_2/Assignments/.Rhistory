# Set up number of participants
n=100
# Create a vector of systolic blood pressures
Systolic_Blood_Pressure <- pmax(110, pmin(200, round(rnorm(n, mean = 120, sd = 30))))
head(Systolic_Blood_Pressure)
# Create a vector of diastolic blood pressures that corresponds to systolic blood pressures
Diastolic_Blood_Pressure <- c()
for (bp in Systolic_Blood_Pressure){
if (bp <= 120){
d_bp <- pmax(70, pmin(100, round(rnorm(1, mean = 80, sd = 5))))
Diastolic_Blood_Pressure <- c(Diastolic_Blood_Pressure, d_bp)
} else{
d_bp <- pmax(90, pmin(150, round(rnorm(1, mean = 100, sd = 5))))
Diastolic_Blood_Pressure <- c(Diastolic_Blood_Pressure, d_bp)
}
}
# Create data frame
dat <-  data.frame(Participant_ID = paste("P", 1:n, sep = "_"),
Age = pmax(18, pmin(90, round(rnorm(n, mean = 50, sd = 10)))),
Sex = sample(c("Male", "Female"), n, replace = TRUE),
Activity_Status = sample(c("Inactive","Lightly Active","Average Activity", "Very Active")),
Disease_Status = sample(c("Case", "Control"), n, replace = TRUE),
Systolic_Blood_Pressure,
Diastolic_Blood_Pressure
)
# Create a Disease_Status  vector where the participants with higher blood pressures are cases
Disease_Status <- c()
for (i in 1:nrow(dat)){
if ((dat[i,"Systolic_Blood_Pressure"] >= 150) & (dat[i,"Diastolic_Blood_Pressure"] >= 95)) {
Disease_Status <- c(Disease_Status, "Case")
} else {
Disease_Status <- c(Disease_Status, "Control ")
}
}
# Add Disease Status to dataframe
dat$Disease_Status <- Disease_Status
# Visualize after adding the Disease Status column
head(dat)
library(tidyr)
dat_long <- pivot_longer(dat, cols = c("Systolic_Blood_Pressure","Diastolic_Blood_Pressure"), names_to = "Blood_Pressures")
print(head(dat_long))
library(ggplot2)
p <- ggplot(dat_long, aes(x = Blood_Pressures, y = value, fill =Disease_Status)) +
geom_boxplot(width = 0.5)+
labs(x = "Blood Pressure Type", y = "Blood Pressure", fill = "Disease Status",
title = "Systolic and Diastolic Blood \nPressure by Disease Status")+
theme_minimal() +
scale_fill_brewer(palette = "Set1")+ scale_x_discrete(labels = c("Diastolic_Blood_Pressure" = "Diastolic Blood Pressure", "Systolic_Blood_Pressure" = "Systolic Blood Pressure"))
ggplot(dat_long, aes(x = value, fill = Disease_Status)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 100)+
labs(x = "Blood Pressure", y = "Counts", fill = "Disease Status",
title = "Systolic and Diastolic Blood \nPressure by Disease Status") +
scale_fill_brewer(palette = "Set2")
ggplot(dat, aes(x = Systolic_Blood_Pressure, y = Diastolic_Blood_Pressure, fill =Disease_Status)) +
geom_point(size=2, shape=23)
library(ggpubr)
png("/Users/f002yt8/Documents/GDSC/GitHub/HDS-Foundations_of_Data_Science/Week_2/images/boxplot.png", width = 2000, height = 1500, res = 300)
p + stat_compare_means(method = "wilcox")
dev.off()
summary(dat$Systolic_Blood_Pressure)
summary(dat$Diastolic_Blood_Pressure)
dat <- subset(dat, select = -c(Diastolic_Blood_Pressure, Systolic_Blood_Pressure))
n=100
Heart_Rate <- c()
for (i in 1:nrow(dat)){
if (dat[i,"Activity_Status"] == "Inactive"){
Heart_Rate <- c(Heart_Rate,pmax(100,pmin(200, round(rnorm(1, mean = 150, sd = 20)))))
} else if (dat[i,"Activity_Status"] == "Lightly Active"){
Heart_Rate <- c(Heart_Rate,pmax(80,pmin(99, round(rnorm(1, mean = 85, sd = 20)))))
} else {
Heart_Rate <- c(Heart_Rate,pmax(40,pmin(79, round(rnorm(1, mean = 50, sd = 20)))))
}
}
dat$Heart_Rate <- Heart_Rate
print(head(dat))
#1)
lst <- list(4, 'j', 'Y', 5, 'f', 'K', 8, 'z', 'T', 'c', 0, 'B', 2, 'm', 'X', 9, 'd', 'V', 3, 'n', 'G', 6, 'h', 'J', 2, 'p', 'O', 1, 'q', 'R', 7, 's', 'D', 2, 'l', 'N', 0, 'w', 'E', 5, 'e', 'U', 4, 'i', 'P', 1, 'a', 'H', 8, 'y', 'S', 3, 'g', 'F', 9, 'b', 'M', 6, 'k', 'L', 7)
#a)
my_types <- c()
for(thing in lst){
my_types <- append(my_types, class(thing))
}
print(my_types)
length(which(my_types == "numeric"))
length(which(my_types == "character"))
idx <- which(lst > 5)
length(idx)
levels(factor(my_types))
which(lst == 1)
file <- read.delim("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_1/Data/GSE165252_vst_PERFECT.txt",row.names = 1)
#b)
ncol(file)
nrow(file)
ENSG00000000005_exp <- hist(as.matrix(file["ENSG00000000005.6",]))
plot(ENSG00000000005_exp)
eso_sub <- file[1:2000,1:3]
write.csv(eso_sub, "/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_1/Data/eso_sub.csv")
less_than <- c()
greater_than <- c()
my_first_function <- function(my_vector){
for (thing in my_vector){
if (thing <=5){
less_than <- append(less_than, thing)
}else{
greater_than <- append(greater_than, thing)
}
}
print(greater_than)
print(less_than)
}
my_vector <- c(1,2,3,4,5,6,7,8,9)
my_first_function(my_vector)
a <- 3.14
b <- "pie"
c <- 3
typeof(a)
typeof(b)
typeof(c)
str(a)
str(b)
str(c)
a <- 3.14
b <- "pie"
c <- 3
str(a)
str(b)
str(c)
numeric
character
numeric
my_vector <- c(c(1,2,3), c(1.11,2.22,3.33),c("a","b","c"))
my_vector <- c(c(1,2,3), c(1.11,2.22,3.33),c("a","b","c"))
str(my_vector)
my_list <- list(c(1,2,3), c(1.11,2.22,3.33),c("a","b","c"))
str(my_vector)
my_list <- list(numeric(1,2,3), numeric(1.11,2.22,3.33),chr("a","b","c"))
my_list <- list(c(1,2,3), c(1.11,2.22,3.33),c("a","b","c"))
str(my_list)
my_floats <- c(1.67, 1.11, 2.25, 8.88, 6.67, 104874587645776.2)
my_integers <- as.integer(my_floats)
my_integers
my_floats <- c(1.67, 1.11, 2.25, 8.88, 6.67, 104874.2)
my_integers <- as.integer(my_floats)
my_integers
arthritis <- c("Formation", "of", "autoantibodies", "to", "carbamylated", "proteins", "(anti-CarP)", "is", "considered", "detrimental", "in", "the", "prognosis", "of", "erosive", "rheumatoid", "arthritis", "(RA).", "The", "source", "of", "carbamylated", "antigens", "and", "the", "mechanisms", "by", "which", "anti-CarP", "antibodies", "promote", "bone", "erosion", "in", "RA", "remain", "unknown.", NA, "Here,", "we", "find", "that", "neutrophil", "extracellular", "traps", "(NETs)", "externalize", "carbamylated", "proteins", "and", "that", "RA", "subjects", "develop", "autoantibodies", "against", "carbamylated", "NET", "(cNET)", "antigens", "that,", "in", "turn,", "correlate", "with", "levels", "of", "anti-CarP.", "Transgenic", "mice", "expressing", "the", "human", "RA", "shared", "epitope", "(HLADRB1*", "04:01)", "immunized", "with", "cNETs", "develop", "antibodies", "to", "citrullinated", "and", NA, "carbamylated", "proteins.", "Furthermore,", "anti–carbamylated", "histone", "antibodies", "correlate", "with", "radiographic", "bone", "erosion", "in", "RA", "subjects.", "Moreover,", "anti–carbamylated", "histone–immunoglobulin", "G", "immune", "complexes", "promote", "osteoclast", "differentiation", "and", "potentiate", "osteoclast-mediated", NA, "matrix", "resorption.", "These", "results", "demonstrate", "that", "carbamylated", "proteins", "present", "in", "NETs", "enhance", "pathogenic", "immune", "responses", "and", "bone", "destruction,", "which", "may", "explain", "the", "association", "between", "anti-CarP", "and", "erosive", NA, "arthritis", "in", "RA.")
x <- which(arthritis == "rheumatoid")
arthritis[x]
length(which(is.na(arthritis) == TRUE))
number_vector <- c(30, 29, 48, 10, 0, 8, 56, 77, 211, 674, 1)
length(which(number_vector < 10))
letter_vector <- c("v","a","b","g","f","a","n","m","q","a","c","w","w","i","e","y")
length(which(letter_vector == "a"))
number_vector <- c(5,5,55,555555,555,55555,5,5,555555555,55,55,555,5,5,55555555,5,55,5,5555,5,555,5555)
result <- length(which(number_vector == 5 | number_vector > 5555))
result
candy <- c("Cadbury Milk Chocolate Bar","Snickers","Gummy Bears","Sweet Tarts","Jolly Ranchers")
candy_sub <- candy[1:3]
candy_sub
smoking_status <- c("Never Smoker", "Current Smoker","Former Smoker","Former Smoker","Never Smoker","Never Smoker","Never Smoker","Current Smoker","Former Smoker","Former Smoker")
levels(factor(smoking_status))
grocery_list <- list(c("Peaches","Bananas","Strawberries","Melon"),
c("Spinach","Lettuce","Carrot","Kale"),
c("Oreos","Chocolate Cake","Gummy Bears","Marshmellows"))
names(grocery_list) <- c("Fruits","Veggies","Dessert")
grocery_list[[2]]
str(grocery_list)
## Load the haven library to read in .xpt files
library(haven)
library(haven)
## Load the haven library to read in .xpt files
library(haven)
## Read in files
blood_pressure_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/BPXO_L.xpt")
## Load the haven library to read in .xpt files
library(haven)
## Read in files
blood_pressure_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/BPXO_2021-2023.xpt")
demographics_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/DEMO_2021-2023.xpt")
## Take a look at the data
head(blood_pressure_df)
head(demographics_df)
## Combine data frames on the SEQN (participant identifier) column
data_df <- merge(demographics_df, blood_pressure_df, by = "SEQN")
## RIDAGEYR - Age in years at exam
## BPXOSY1 - Systolic reading
## Read in libraries
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Histogram for Age
p1 <- ggplot(data_df, aes(x = RIDAGEYR)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Age",
x = "Age",
y = "Frequency")
# Violin plot for Age
p2 <- ggplot(data_df, aes(x = "", y = RIDAGEYR)) +
geom_violin(fill = "blue", alpha = 0.7) +
labs(title = "Violin Plot of Age",
x = "",
y = "Age")
# Cumulative Distribution Function for Age
p3 <- ggplot(data_df, aes(x = RIDAGEYR)) +
stat_ecdf(geom = "step", color = "blue") +
labs(title = "CDF of Age",
x = "Age",
y = "Cumulative Probability")
# Arrange Age plots
ridageyr_plots <- ggarrange(p1, p2, p3,
ncol = 2,
nrow = 2)
# Histogram for Systolic Blood Pressure
p4 <- ggplot(data_df, aes(x = BPXOSY1)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
labs(title = "Histogram of Systolic Blood Pressure",
x = "Systolic Blood Pressure",
y = "Frequency")
# Violin plot for Systolic Blood Pressure
p5 <- ggplot(data_df, aes(x = "", y = BPXOSY1)) +
geom_violin(fill = "red", alpha = 0.7) +
labs(title = "Violin Plot of Systolic Blood Pressure",
x = "",
y = "Systolic Blood Pressure")
# Cumulative Distribution Function for Systolic Blood Pressure
p6 <- ggplot(data_df, aes(x = BPXOSY1)) +
stat_ecdf(geom = "step", color = "red") +
labs(title = "CDF of Systolic Blood Pressure",
x = "Systolic Blood Pressure",
y = "Cumulative Probability")
# Arrange Systolic Blood Pressure plots
BPXOSY1_plots <- ggarrange(p4, p5, p6,
ncol = 2,
nrow = 2)
# Display plots
print(ridageyr_plots)
print(BPXOSY1_plots)
## Load the haven library to read in .xpt files
library(haven)
## Read in files
lab_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/ALB_CR_2017-2018.xpt")
kidney_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/KIQ_U_2017-2018.xpt")
## Take a look at the data
head(lab_df)
head(kidney_df)
head(demographic_df)
head(kidney_df)
## Load the haven library to read in .xpt files
library(haven)
## Read in files
lab_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/ALB_CR_2017-2018.xpt")
kidney_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/KIQ_U_2017-2018.xpt")
demographics_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/DEMO_2017-2018.xpt")
## Take a look at the data
head(lab_df)
head(kidney_df)
head(demographic_df)
## Subset data frames
kidney_df <- subset(kidney_df, select = c(SEQN,KIQ022))
lab_df <- subset(lab_df, select = c(SEQN, URXUMA, URXUCR))
demographics_df <- subset(demographics_df, select = c(SEQN, RIDAGEYR, RIAGENDR))
dat_df <- merge(demographic_df, lab_df, by = "SEQN")
dat_df <- merge(demographics_df, lab_df, by = "SEQN")
head(dat_df)
dat_df <- merge(dat_df, kidney_df, by = "SEQN")
head(dat_df)
## Load the haven library to read in .xpt files
library(haven)
## Read in files
lab_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/ALB_CR_2017-2018.xpt")
kidney_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/KIQ_U_2017-2018.xpt")
demographics_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/DEMO_2017-2018.xpt")
## Take a look at the data
head(lab_df)
head(kidney_df)
head(demographics_df)
## Subset data frames
kidney_df <- subset(kidney_df, select = c(SEQN,KIQ022))
lab_df <- subset(lab_df, select = c(SEQN, URXUMA, URXUCR))
demographics_df <- subset(demographics_df, select = c(SEQN, RIDAGEYR, RIAGENDR))
dat_df <- merge(demographics_df, lab_df, by = "SEQN")
dat_df <- merge(dat_df, kidney_df, by = "SEQN")
head(dat_df)
colnames(dat_df) <- c("Subject_ID","Age","Sex","Albumin","Creatinine","Weak_Kidney")
dat_df <- dat_df %>% mutate(Sex = recode(Sex, `1` = "Male", `2` = "Female"))
library(tidyr)
dat_df <- dat_df %>% mutate(Sex = recode(Sex, `1` = "Male", `2` = "Female"))
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
dat_df <- dat_df %>% mutate(Sex = recode(Sex, `1` = "Male", `2` = "Female"))
dat_df <- dat_df %>% mutate(Weak_Kidney = recode(Weak_Kidney, `1` = "Yes", `2` = "No",
`7` = "Refused", `9` = "Don't Know"))
head(dat_df)
## Check for NAs in the age variable
length(which(is.na(data_df$RIDAGEYR) == TRUE))
## Check for NAs in the age variable
length(which(is.na(data_df$BPXOSY1) == TRUE))
## Subset the data to remove under 18
data_df_sub <- data_df[data_df$RIDAGEYR >= 18,]
## Subset the data to remove participants with NA values
data_df_sub <- data_df_sub[(is.na(data_df_sub$BPXOSY1) == FALSE),]
## Number of participants after subsetting to adults
dim(data_df_sub)
# Basic scatter plot of Systolic Blood Pressure vs Age
ggplot(data_df_sub, aes(x = RIDAGEYR, y = BPXOSY1)) +
geom_point(alpha = 0.6, color = "blue") +             # scatter points with some transparency
labs(
title = "Scatter plot of Systolic Blood Pressure vs Age",
x = "Age",
y = "Systolic Blood Pressure"
) +
theme_minimal()
# Fit linear model
model <- lm(BPXOSY1 ~ RIDAGEYR, data = data_df_sub)
# Extract coefficients
coefficients <- coef(model)
intercept <- coefficients[1]
slope <- coefficients[2]
# Create equation label text
eq_label <- paste0("y = ",
round(slope, 2), "x + ",
round(intercept, 2))
# Generate scatter plot with regression line and equation annotation
ggplot(data_df_sub, aes(x = RIDAGEYR, y = BPXOSY1)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(
title = "Systolic Blood Pressure vs Age \nwith Regression Line and Equation",
x = "Age",
y = "Systolic Blood Pressure"
) +
annotate("text", x = Inf, y = -Inf, label = eq_label,
hjust = 1.1, vjust = -1.1, size = 5, color = "red") +
theme_minimal()
head(dat_df)
g <- ggplot(dat_df, aes(Albumin))
g + geom_density(aes(fill=factor(Sex)), alpha=0.8) +
labs(title="Density of Albumin (ug/ml) by Sex",
subtitle="Albumin (ug/ml) by Sex",
x="Albumin (ug/ml)",
fill="Sex")
g <- ggplot(dat_df, aes(Creatinine))
g + geom_density(aes(fill=factor(Sex)), alpha=0.8) +
labs(title="Density of Creatinine (ug/ml) by Sex",
subtitle="Creatinine (ug/ml) by Sex",
x="Creatinine (ug/ml)",
fill="Sex")
p1 <- ggplot(dat_df, aes(x = "", y = Age, fill = Sex)) +
geom_violin(fill = "blue", alpha = 0.7) +
labs(title = "Violin Plot of Age",
x = "",
y = "Age")
print(p1)
p1 <- ggplot(dat_df, aes(x = "", y = Albumin, fill = Sex)) +
geom_violin(fill = c("blue","red"), alpha = 0.7) +
labs(title = "Violin Plot of Age",
x = "",
y = "Albumin (ug/ml)")
print(p1)
## Violin plot
p1 <- ggplot(dat_df, aes(x = "", y = Albumin, fill = Sex)) +
geom_violin(fill = c("blue"), alpha = 0.7) +
labs(title = "Violin Plot of Age",
x = "",
y = "Albumin (ug/ml)")
print(p1)
p1 <- ggplot(dat_df, aes(Sex,Albumin)) +
geom_violin(fill = c("blue"), alpha = 0.7) +
labs(title = "Violin Plot of Age",
x = "",
y = "Albumin (ug/ml)")
print(p1)
p1 <- ggplot(dat_df, aes(Sex,Age)) +
geom_violin(fill = c("blue", "red"), alpha = 0.7) +
labs(title = "Violin Plot of Age",
x = "",
y = "Albumin (ug/ml)")
print(p1)
p1 <- ggplot(dat_df, aes(Sex,Creatinine)) +
geom_violin(fill = c("blue", "red"), alpha = 0.7) +
labs(title = "Violin Plot of Creatinine",
x = "",
y = "Creatinine (mg/dL)")
print(p1)
p1 <- ggplot(dat_df, aes(Sex,Creatinine)) +
geom_violin(fill = c("blue"), alpha = 0.7) +
labs(title = "Violin Plot of Creatinine",
x = "",
y = "Creatinine (mg/dL)")
print(p1)
p1 <- ggplot(dat_df, aes(Sex,Creatinine, fill = Sex)) +
geom_violin(fill = c("blue","red"), alpha = 0.7) +
labs(title = "Violin Plot of Creatinine",
x = "",
y = "Creatinine (mg/dL)")
print(p1)
p1 <- ggplot(dat_df, aes(x = Sex, y = Creatinine, fill = Sex)) +
geom_violin(alpha = 0.7) +
scale_fill_manual(values = c("Male" = "blue", "Female" = "red")) +
labs(title = "Violin Plot of Creatinine",
x = "",
y = "Creatinine (mg/dL)")
print(p1)
p2 <- ggplot(dat_df, aes(Albumin, Creatinine)) + geom_point() +
geom_smooth(method="lm") +
labs(subtitle="Albumin (ug/ml) vs. Creatinine (mg/dL)",
y="Creatinine (mg/dL)",
x="Albumin (ug/ml)",
title="Scatterplot of Albumin (ug/ml) vs. Creatinine (mg/dL)")
print(p2)
p2 <- ggplot(dat_df, aes(Creatinine,Albumin)) + geom_point() +
geom_smooth(method="lm") +
labs( y="Albumin (ug/ml)",
x="Creatinine (mg/dL)",
title="Scatterplot of Albumin (ug/ml) vs. Creatinine (mg/dL)")
print(p2)
library(ggplot2)
## Generate a grid of plots
## Violin plot
p1 <- ggplot(dat_df, aes(x = Sex, y = Creatinine, fill = Sex)) +
geom_violin(alpha = 0.7) +
scale_fill_manual(values = c("Male" = "blue", "Female" = "red")) +
labs(title = "Violin Plot of Creatinine",
x = "",
y = "Creatinine (mg/dL)")
print(p1)
## Scatter plot of albumin and creatinine
p2 <- ggplot(dat_df, aes(Creatinine,Albumin)) + geom_point() +
geom_smooth(method="lm") +
labs( y="Albumin (ug/ml)",
x="Creatinine (mg/dL)",
title="Scatterplot of Albumin (ug/ml) vs. Creatinine (mg/dL)")
print(p2)
## Denisty plot of albumin
p3 <- ggplot(dat_df, aes(Creatinine)) + geom_density(aes(fill=factor(Sex)), alpha=0.8) +
labs(title="Density of Creatinine (mg/dL) by Sex",
subtitle="Creatinine (mg/dL) by Sex",
x="Creatinine (mg/dL)",
fill="Sex")
plots <- ggarrange(p1, p1, p1, ncol = 2, nrow = 2)
print(plots)
plots <- ggarrange(p1, p2, p3, ncol = 2, nrow = 2)
print(plots)
