## Load the haven library to read in .xpt files
library(haven)
## Read in files
blood_pressure_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/BPXO_L.xpt")
demographics_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/DEMO_L.xpt")
## Take a look at the data
head(blood_pressure_df)
head(demographics_df)
## Combine data frames on the SEQN (participant identifier) column
data_df <- merge(demographics_df, blood_pressure_df, by = "SEQN")
## RIDAGEYR - Age in years at exam
## BPXOSY1 - Systolic reading
create_distribution_plots <- function(data, variable, fill_color = "blue") {
# Histogram
p1 <- ggplot(data, aes(x = !!sym(variable))) +
geom_histogram(bins = 30, fill = fill_color, alpha = 0.7) +
labs(title = paste("Histogram of", variable),
x = variable,
y = "Frequency")
# Violin plot
p2 <- ggplot(data, aes(x = "", y = !!sym(variable))) +
geom_violin(fill = fill_color, alpha = 0.7) +
labs(title = paste("Violin Plot of", variable),
x = "",
y = variable)
# Cumulative Distribution Function
p3 <- ggplot(data, aes(x = !!sym(variable))) +
stat_ecdf(geom = "step", color = fill_color) +
labs(title = paste("CDF of", variable),
x = variable,
y = "Cumulative Probability")
# Arrange plots
plots <- ggarrange(p1, p2, p3,
ncol = 2,
nrow = 2)
return(plots)
}
# Usage example:
# For Age
ridageyr_plots <- create_distribution_plots(data_df, "RIDAGEYR", "blue")
## Load the haven library to read in .xpt files
library(haven)
## Read in files
blood_pressure_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/BPXO_L.xpt")
demographics_df <- read_xpt("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data/DEMO_L.xpt")
## Take a look at the data
head(blood_pressure_df)
head(demographics_df)
## Combine data frames on the SEQN (participant identifier) column
data_df <- merge(demographics_df, blood_pressure_df, by = "SEQN")
## RIDAGEYR - Age in years at exam
## BPXOSY1 - Systolic reading
## Read in libraries
library(ggplot2)
library(gridExtra)
library(ggpubr)
# Histogram for Age
p1 <- ggplot(data_df, aes(x = RIDAGEYR)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Age",
x = "Age",
y = "Frequency")
# Violin plot for Age
p2 <- ggplot(data_df, aes(x = "", y = RIDAGEYR)) +
geom_violin(fill = "blue", alpha = 0.7) +
labs(title = "Violin Plot of Age",
x = "",
y = "Age")
# Cumulative Distribution Function for Age
p3 <- ggplot(data_df, aes(x = RIDAGEYR)) +
stat_ecdf(geom = "step", color = "blue") +
labs(title = "CDF of Age",
x = "Age",
y = "Cumulative Probability")
# Arrange Age plots
ridageyr_plots <- ggarrange(p1, p2, p3,
ncol = 2,
nrow = 2)
# Histogram for Systolic Blood Pressure
p4 <- ggplot(data_df, aes(x = BPXOSY1)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
labs(title = "Histogram of Systolic Blood Pressure",
x = "Systolic Blood Pressure",
y = "Frequency")
# Violin plot for Systolic Blood Pressure
p5 <- ggplot(data_df, aes(x = "", y = BPXOSY1)) +
geom_violin(fill = "red", alpha = 0.7) +
labs(title = "Violin Plot of Systolic Blood Pressure",
x = "",
y = "Systolic Blood Pressure")
# Cumulative Distribution Function for Systolic Blood Pressure
p6 <- ggplot(data_df, aes(x = BPXOSY1)) +
stat_ecdf(geom = "step", color = "red") +
labs(title = "CDF of Systolic Blood Pressure",
x = "Systolic Blood Pressure",
y = "Cumulative Probability")
# Arrange Systolic Blood Pressure plots
BPXOSY1_plots <- ggarrange(p4, p5, p6,
ncol = 2,
nrow = 2)
# Display plots
print(ridageyr_plots)
print(BPXOSY1_plots)
## Check for NAs in the age variable
length(which(is.na(data_df$RIDAGEYR) == TRUE))
## Check for NAs in the age variable
length(which(is.na(data_df$BPXOSY1) == TRUE))
## Subset the data to remove under 18
data_df_sub <- data_df[data_df$RIDAGEYR >= 18,]
## Subset the data to remove participants with NA values
data_df_sub <- data_df_sub[(is.na(data_df_sub$BPXOSY1) == FALSE),]
## Number of participants after subsetting to adults
dim(data_df_sub)
# Basic scatter plot of Systolic Blood Pressure vs Age
ggplot(data_df_sub, aes(x = RIDAGEYR, y = BPXOSY1)) +
geom_point(alpha = 0.6, color = "blue") +             # scatter points with some transparency
labs(
title = "Scatter plot of Systolic Blood Pressure vs Age",
x = "Age",
y = "Systolic Blood Pressure"
) +
theme_minimal()
# Fit linear model
model <- lm(BPXOSY1 ~ RIDAGEYR, data = data_df_sub)
# Extract coefficients
coefficients <- coef(model)
intercept <- coefficients[1]
slope <- coefficients[2]
# Create equation label text
eq_label <- paste0("y = ",
round(slope, 2), "x + ",
round(intercept, 2))
# Generate scatter plot with regression line and equation annotation
ggplot(data_df_sub, aes(x = RIDAGEYR, y = BPXOSY1)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(
title = "Systolic Blood Pressure vs Age \nwith Regression Line and Equation",
x = "Age",
y = "Systolic Blood Pressure"
) +
annotate("text", x = Inf, y = -Inf, label = eq_label,
hjust = 1.1, vjust = -1.1, size = 5, color = "red") +
theme_minimal()
create_distribution_plots <- function(data, variable, fill_color = "blue") {
# Histogram
p1 <- ggplot(data, aes(x = !!sym(variable))) +
geom_histogram(bins = 30, fill = fill_color, alpha = 0.7) +
labs(title = paste("Histogram of", variable),
x = variable,
y = "Frequency")
# Violin plot
p2 <- ggplot(data, aes(x = "", y = !!sym(variable))) +
geom_violin(fill = fill_color, alpha = 0.7) +
labs(title = paste("Violin Plot of", variable),
x = "",
y = variable)
# Cumulative Distribution Function
p3 <- ggplot(data, aes(x = !!sym(variable))) +
stat_ecdf(geom = "step", color = fill_color) +
labs(title = paste("CDF of", variable),
x = variable,
y = "Cumulative Probability")
# Arrange plots
plots <- ggarrange(p1, p2, p3,
ncol = 2,
nrow = 2)
return(plots)
}
# Usage example:
# For Age
ridageyr_plots <- create_distribution_plots(data_df, "RIDAGEYR", "blue")
# For Systolic Blood Pressure
BPXOSY1_plots <- create_distribution_plots(data_df, "BPXOSY1", "red")
# Display plots
print(ridageyr_plots)
print(BPXOSY1_plots)
## Run for diastolic blood pressure
#create_distribution_plots(data_df, "RIDAGEYR", "blue")
## Run for diastolic blood pressure
colnames(data_df)
## Run for diastolic blood pressure
diastolic_bp_plots <- create_distribution_plots(data_df, "BPXODI1", "orange")
## Run for BMI
bmi_plots <- create_distribution_plots(data_df, "BMXBMI", "purple")
## Run for diastolic blood pressure
diastolic_bp_plots <- create_distribution_plots(data_df, "BPXODI1", "orange")
## Run for BMI
bmi_plots <- create_distribution_plots(data_df, "BMXWT", "purple")
## Run for diastolic blood pressure
diastolic_bp_plots <- create_distribution_plots(data_df, "BPXODI1", "orange")
## Run for BMI
#bmi_plots <- create_distribution_plots(data_df, "BMXWT", "purple")
## Run for height
height_plots <- create_distribution_plots(data_df, "BMXHT", "darkgreen")
colnames(data_df)
## Run for diastolic blood pressure
diastolic_bp_plots <- create_distribution_plots(data_df, "BPXODI1", "orange")
## Run for heart rate
heart_rate_plots <- create_distribution_plots(data_df, "BPXOPLS1", "darkgreen")
## Print out results
print(diastolic_bp_plots)
print(heart_rate_plots)
# Load required libraries
library(haven)
library(dplyr)
# Set the path to the data files
data_path <- "/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data"
# List all .xpt files in the directory
xpt_files <- list.files(path = data_path, pattern = "\\.xpt$")
# Create empty lists to store BPXO and DEMO dataframes
bpxo_dfs <- list()
demo_dfs <- list()
# Read in BPXO and DEMO files
for (file in xpt_files) {
# Read the file
df <- read_xpt(file.path(data_path, file))
# Separate BPXO and DEMO files
if (grepl("BPXO", file)) {
bpxo_dfs[[file]] <- df
} else if (grepl("DEMO", file)) {
demo_dfs[[file]] <- df
}
}
# Merge corresponding BPXO and DEMO dataframes
merged_dfs <- list()
for (bpxo_name in names(bpxo_dfs)) {
# Find the corresponding DEMO file by matching years
matching_demo <- grep(gsub("BPXO", "DEMO", bpxo_name), names(demo_dfs), value = TRUE)
if (length(matching_demo) > 0) {
# Merge the dataframes by SEQN
merged_dfs[[bpxo_name]] <- inner_join(bpxo_dfs[[bpxo_name]],
demo_dfs[[matching_demo]],
by = "SEQN")
}
}
merged_dfs$`BPXO_2015-2016.xpt`
merged_dfs$`BPXO_2017-2018.xpt`
merged_dfs$`BPXO_2021-2023.xpt`
filenames <- list.files(path = "/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data", pattern = ".csv")
print(filenames)
filenames <- list.files(path = "/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data", pattern = "sample")
print(filenames)
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
for (file in filenames){
the_file <- read.csv(file)
print(head(the_file))
}
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
for (file in filenames){
the_file <- read.csv(file)
print(summary(the_file$age))
}
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
histogram <- ggplot(the_file, aes(x=age_var)) + geom_histogram(bins = 10, fill = "darkgreen")
plot(histogram)
}
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x=sex, y=age, fill = sex)) +
geom_boxplot() + scale_fill_manual(values=c("goldenrod1","darkgray"))
plot(box_plot)
}
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x=sex, y=age, fill = sex)) +
geom_boxplot() + scale_fill_manual(values=c("goldenrod1","darkgray"))
plot(box_plot)
}
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
library(harrypotter)
insstall.packages("harrypotter")
install.packages("harrypotter")
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
library(harrypotter)
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x=race, y=age, fill = race)) +
geom_boxplot() + scale_fill_hp_d(option = "ronweasley")
plot(box_plot)
}
merged_dfs$`BPXO_2015-2016.xpt`
merged_dfs$`BPXO_2017-2018.xpt`
for (bpxo_name in names(bpxo_dfs)) {
# Find the corresponding DEMO file by matching years
matching_demo <- grep(gsub("BPXO", "DEMO", bpxo_name), names(demo_dfs), value = TRUE)
print(matching_demo)
if (length(matching_demo) > 0) {
# Merge the dataframes by SEQN
merged_dfs[[bpxo_name]] <- inner_join(bpxo_dfs[[bpxo_name]],
demo_dfs[[matching_demo]],
by = "SEQN")
}
}
for (bpxo_name in names(bpxo_dfs)) {
# Find the corresponding DEMO file by matching years
matching_demo <- grep(gsub("BPXO", "DEMO", bpxo_name), names(demo_dfs), value = TRUE)
print(bpxo_name)
print(matching_demo)
if (length(matching_demo) > 0) {
# Merge the dataframes by SEQN
merged_dfs[[bpxo_name]] <- inner_join(bpxo_dfs[[bpxo_name]],
demo_dfs[[matching_demo]],
by = "SEQN")
}
}
for (bpxo_name in names(bpxo_dfs)) {
# Find the corresponding DEMO file by matching years
matching_demo <- grep(gsub("BPXO", "DEMO", bpxo_name), names(demo_dfs), value = TRUE)
merged_dfs[[bpxo_name]] <- merge(bpxo_dfs[[bpxo_name]],
demo_dfs[[matching_demo]],
by = "SEQN")
}
dim(merged_dfs$`BPXO_2015-2016.xpt`)
names(bpxo_dfs)
gsub("BPXO", "DEMO", "BPXO_2015-2016.xpt")
names(merged_dfs) <- c("years2015-2016","years2017-2018","years2021-2023")
for (df in merged_dfs){
print(create_distribution_plots(df, "RIDAGEYR", "#81555a"))
}
## Using .csv as the pattern search
filenames <- list.files(path = "/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data", pattern = ".csv")
print(filenames)
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
for (file in filenames){
the_file <- read.csv(file)
print(head(the_file))
}
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
for (file in filenames){
the_file <- read.csv(file)
print(summary(the_file$age))
}
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
histogram <- ggplot(the_file, aes(x=age_var)) + geom_histogram(bins = 10, fill = "darkgreen")
plot(histogram)
}
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
# for (file in filenames){
#   the_file <- read.csv(file)
#   age_var <- the_file$age
#   histogram <- ggplot(the_file, aes(x=age_var)) + geom_histogram(bins = 10, fill = "darkgreen")
#   plot(histogram)
# }
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
histogram <- ggplot(the_file, aes(x = age_var)) +
geom_histogram(bins = 10,
fill = "darkgreen",
color = "black",
alpha = 0.7) +
labs(
title = paste("Age Distribution -", file),
x = "Age (years)",
y = "Frequency"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
panel.grid.minor = element_blank()
)
plot(histogram)
}
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
# for (file in filenames){
#   the_file <- read.csv(file)
#   age_var <- the_file$age
#   box_plot <- ggplot(the_file, aes(x=sex, y=age, fill = sex)) +
#   geom_boxplot() + scale_fill_manual(values=c("goldenrod1","darkgray"))
#   plot(box_plot)
# }
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x = sex, y = age, fill = sex)) +
geom_boxplot(alpha = 0.7,
color = "black",
outlier.color = "red",
outlier.shape = 16) +
scale_fill_manual(values = c("goldenrod1", "darkgray")) +
labs(
title = paste("Age Distribution by Sex -", file),
x = "Sex",
y = "Age (years)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.position = "none",
panel.grid.minor = element_blank()
)
plot(box_plot)
}
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
# for (file in filenames){
#   the_file <- read.csv(file)
#   age_var <- the_file$age
#   box_plot <- ggplot(the_file, aes(x=sex, y=age, fill = sex)) +
#   geom_boxplot() + scale_fill_manual(values=c("goldenrod1","darkgray"))
#   plot(box_plot)
# }
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x = sex, y = age, fill = sex)) +
geom_boxplot(alpha = 0.7,
color = "black",
outlier.color = "red",
outlier.shape = 16,
width = 0.5) +
scale_fill_manual(values = c("goldenrod1", "darkgray")) +
labs(
title = paste("Age Distribution by Sex -", file),
x = "Sex",
y = "Age (years)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.position = "none",
panel.grid.minor = element_blank()
)
plot(box_plot)
}
setwd("/Users/f002yt8/Documents/GitHub/HDS-Foundations_of_Data_Science/Week_3/Data")
library(harrypotter)
# for (file in filenames){
#   the_file <- read.csv(file)
#   age_var <- the_file$age
#   box_plot <- ggplot(the_file, aes(x=race, y=age, fill = race)) +
#   geom_boxplot() + scale_fill_hp_d(option = "ronweasley")
#   plot(box_plot)
# }
for (file in filenames){
the_file <- read.csv(file)
age_var <- the_file$age
box_plot <- ggplot(the_file, aes(x = race, y = age, fill = race)) +
geom_boxplot(alpha = 0.7,
color = "black",
outlier.color = "red",
outlier.shape = 16,
width = 0.5) +
scale_fill_hp_d(option = "ronweasley") +
labs(
title = paste("Age Distribution by Race -", file),
x = "Race",
y = "Age (years)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.position = "none",
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)
)
plot(box_plot)
}
